import pandas as pd  # ุงุณุชูุฑุงุฏ ููุชุจุฉ Pandas ููุชุนุงูู ูุน ุงูุจูุงูุงุช.
import numpy as np  # ุงุณุชูุฑุงุฏ ููุชุจุฉ NumPy ููุนูููุงุช ุงูุฑูุงุถูุฉ ุนูู ุงููุตูููุงุช.
import matplotlib.pyplot as plt  # ุงุณุชูุฑุงุฏ ููุชุจุฉ Matplotlib ูุฑุณู ุงูุจูุงูุงุช.
import seaborn as sns  # ุงุณุชูุฑุงุฏ ููุชุจุฉ Seaborn ูุชุญุณูู ุงูุฑุณูู ุงูุจูุงููุฉ.
import random  # ุงุณุชูุฑุงุฏ ููุชุจุฉ Random ูุชูููุฏ ุฃุฑูุงู ุนุดูุงุฆูุฉ.
import h5py  # ุงุณุชูุฑุงุฏ ููุชุจุฉ HDF5 ููุชุนุงูู ูุน ูููุงุช ุงูุจูุงูุงุช.
from keras.models import Sequential, load_model  # ุงุณุชูุฑุงุฏ ูููุฐุฌ Keras ููุชุนูู ุงูุนููู.
#Conv2D :ุงููุธููุฉ: ุทุจูุฉ ุงูุงูุชูุงู (Convolutional Layer) ุชูุณุชุฎุฏู ูุงุณุชุฎุฑุงุฌ ุงูููุฒุงุช ูู ุงูุตูุฑ.
#MaxPooling2D:ุงููุธููุฉ: ุทุจูุฉ ุชุฌููุน (Pooling Layer) ุชูุณุชุฎุฏู ูุชูููู ุงูุฃุจุนุงุฏ ุงูููุงููุฉ ููุจูุงูุงุช (ุงูุงุฑุชูุงุน ูุงูุนุฑุถ).
#Dense:ุงููุธููุฉ: ุทุจูุฉ ูุซููุฉ (Fully Connected Layer) ุชูุณุชุฎุฏู ูู ุงูุดุจูุงุช ุงูุนุตุจูุฉ ูุชุฌููุน ุงูููุฒุงุช ุงููุณุชุฎุฑุฌุฉ.
#Flatten:ุงููุธููุฉ: ุทุจูุฉ ุชุญููู (Flattening Layer) ุชุณุชุฎุฏู ูุชุญููู ุงูุจูุงูุงุช ูู ุดูู ูุชุนุฏุฏ ุงูุฃุจุนุงุฏ ุฅูู ุดูู ุฃุญุงุฏู ุงูุจุนุฏ.
# Dropout:ุทุจูุฉ ุฅุณูุงุท (drop) ูุณุจุฉ ูุนููุฉ ูู ุงููุญุฏุงุช ุฃุซูุงุก ุงูุชุฏุฑูุจุ ููุง ูุณุงุนุฏ ูู ุชุญุณูู
# BatchNormalization  :ุชููู ุจุชุทุจูุน ุงููุฏุฎูุงุช ููู ุทุจูุฉ ุจุญูุซ ูููู ููุง ูุชูุณุท 0 ูุงูุญุฑุงู ูุนูุงุฑู 1ุ ููุง ูุณุงุนุฏ ูู ุชูููู ุชุฃุซูุฑ ุงูุชุบูุฑุงุช ูู ุงููุฏุฎูุงุช.
from keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout, BatchNormalization  # ุงุณุชูุฑุงุฏ ุงูุทุจูุงุช ุงููุณุชุฎุฏูุฉ ูู ุงูุดุจูุฉ ุงูุนุตุจูุฉ.
from keras.optimizers import Adam  # ุงุณุชูุฑุงุฏ ุฎูุงุฑุฒููุฉ Adam ููุชุญุฏูุซุงุช.
from keras.preprocessing.image import ImageDataGenerator  # ุงุณุชูุฑุงุฏ ูููุฏ ุงูุจูุงูุงุช ูุฒูุงุฏุฉ ุงูุจูุงูุงุช.
from sklearn.metrics import confusion_matrix, classification_report  # ุงุณุชูุฑุงุฏ ููุงููุณ ุงูุฃุฏุงุก ูุซู ูุตูููุฉ ุงูุงุฑุชุจุงู ูุงูุชูุฑูุฑ ุงูุชุตูููู.

# ุชุญููู ุงูุจูุงูุงุช
filename_train = 'C:/Users/pc\Desktop/level_four2_IT/face_recognition/train_happy.h5'  # ูุณุงุฑ ููู ุจูุงูุงุช ุงูุชุฏุฑูุจ.
filename_test = 'C:/Users/pc\Desktop/level_four2_IT/face_recognition/test_happy.h5'    # ูุณุงุฑ ููู ุจูุงูุงุช ุงูุงุฎุชุจุงุฑ.

# ูุชุญ ูููุงุช HDF5
happy_training = h5py.File(filename_train, 'r')  # ูุชุญ ููู ุงูุชุฏุฑูุจ ูู ูุถุน ุงููุฑุงุกุฉ.
happy_testing = h5py.File(filename_test, 'r')    # ูุชุญ ููู ุงูุงุฎุชุจุงุฑ ูู ูุถุน ุงููุฑุงุกุฉ.

# ูุฑุงุกุฉ ุงูุจูุงูุงุช ูู ุงููููุงุช
X_train = np.array(happy_training['train_set_x'][:])  # ุชุญููู ูุฌููุนุฉ ุจูุงูุงุช ุงูุชุฏุฑูุจ ุฅูู ูุตูููุฉ NumPy.
y_train = np.array(happy_training['train_set_y'][:])  # ุชุญููู ุชุณููุงุช ุงูุชุฏุฑูุจ ุฅูู ูุตูููุฉ NumPy.

X_test = np.array(happy_testing['test_set_x'][:])  # ุชุญููู ูุฌููุนุฉ ุจูุงูุงุช ุงูุงุฎุชุจุงุฑ ุฅูู ูุตูููุฉ NumPy.
y_test = np.array(happy_testing['test_set_y'][:])  # ุชุญููู ุชุณููุงุช ุงูุงุฎุชุจุงุฑ ุฅูู ูุตูููุฉ NumPy.

# ุนุฑุถ ุดูู ุงูุจูุงูุงุช
print("X_train shape:", X_train.shape)  # ุทุจุงุนุฉ ุดูู ูุฌููุนุฉ ุจูุงูุงุช ุงูุชุฏุฑูุจ.
print("y_train shape:", y_train.shape)  # ุทุจุงุนุฉ ุดูู ุชุณููุงุช ุงูุชุฏุฑูุจ.
print("X_test shape:", X_test.shape)    # ุทุจุงุนุฉ ุดูู ูุฌููุนุฉ ุจูุงูุงุช ุงูุงุฎุชุจุงุฑ.
print("y_test shape:", y_test.shape)    # ุทุจุงุนุฉ ุดูู ุชุณููุงุช ุงูุงุฎุชุจุงุฑ.

# ุนุฑุถ ุตูุฑุฉ ุนุดูุงุฆูุฉ ูู ูุฌููุนุฉ ุงูุชุฏุฑูุจ
i = random.randint(0, len(X_train) - 1)  # ุงุฎุชูุงุฑ ููุฑุณ ุนุดูุงุฆู ููุตูุฑุฉ.
plt.figure(figsize=(6, 6))  # ุชุญุฏูุฏ ุญุฌู ุงูุดูู.
plt.imshow(X_train[i])  # ุนุฑุถ ุงูุตูุฑุฉ ุงููุฎุชุงุฑุฉ.
plt.title(f'Label: {y_train[i]}')  # ุฅุถุงูุฉ ุนููุงู ูุนุฑุถ ุงูุชุณููุฉ.
plt.axis('off')  # ุฅุฒุงูุฉ ุงููุญุงูุฑ.
plt.show()  # ุนุฑุถ ุงูุตูุฑุฉ.

# ุนุฑุถ ูุฌููุนุฉ ูู ุงูุตูุฑ
W_grid = 5  # ุนุฏุฏ ุงูุฃุนูุฏุฉ ูู ุงูุดุจูุฉ.
L_grid = 5  # ุนุฏุฏ ุงูุตููู ูู ุงูุดุจูุฉ.
n_training = len(X_train)  # ุนุฏุฏ ุงูุตูุฑ ูู ูุฌููุนุฉ ุงูุชุฏุฑูุจ.

fig, axes = plt.subplots(L_grid, W_grid, figsize=(25, 25))  # ุฅูุดุงุก ุดุจูุฉ ูุฑุนูุฉ ูุนุฑุถ ุงูุตูุฑ.
axes = axes.ravel()  # ุชุญููู ุงููุตูููุฉ ุฅูู ุดูู ูุณุทุญ.

for i in range(W_grid * L_grid):  # ุชูุฑุงุฑ ูุชูููุฏ ุตูุฑ ุนุดูุงุฆูุฉ.
    index = np.random.randint(0, n_training)  # ุงุฎุชูุงุฑ ููุฑุณ ุนุดูุงุฆู ููุตูุฑุฉ.
    axes[i].imshow(X_train[index])  # ุนุฑุถ ุงูุตูุฑุฉ.
    axes[i].set_title(f'Label: {y_train[index]}', fontsize=25)  # ุฅุถุงูุฉ ุนููุงู ููุตูุฑุฉ.
    axes[i].axis('off')  # ุฅุฒุงูุฉ ุงููุญุงูุฑ.

plt.suptitle('Sample Images from Training Set', fontsize=30)  # ุนููุงู ุนุงู ููุดุจูุฉ.
plt.show()  # ุนุฑุถ ุงูุตูุฑ.

# ุชุทุจูุน ุงูุจูุงูุงุช
X_train = X_train / 255.0  # ุชุทุจูุน ููู ุจูุงูุงุช ุงูุชุฏุฑูุจ ุฅูู ูุทุงู [0, 1].
X_test = X_test / 255.0    # ุชุทุจูุน ููู ุจูุงูุงุช ุงูุงุฎุชุจุงุฑ ุฅูู ูุทุงู [0, 1].

# ุฅุนุฏุงุฏ ุฒูุงุฏุฉ ุงูุจูุงูุงุช
datagen = ImageDataGenerator(  # ุฅุนุฏุงุฏ ูููุฏ ุงูุจูุงูุงุช ูุฒูุงุฏุฉ ุงูุจูุงูุงุช.
    rotation_range=20,  # ุฏูุฑุงู ุงูุตูุฑุฉ ุจุฒุงููุฉ ุญุชู 20 ุฏุฑุฌุฉ.
    width_shift_range=0.2,  # ููู ุงูุตูุฑุฉ ุนุฑุถูุงู ุญุชู 20%.
    height_shift_range=0.2,  # ููู ุงูุตูุฑุฉ ุนููุฏูุงู ุญุชู 20%.
    shear_range=0.2,  # ูุต ุงูุตูุฑุฉ ุจุฒุงููุฉ ุญุชู 20%.
    zoom_range=0.2,  # ุชูุจูุฑ ุฃู ุชุตุบูุฑ ุงูุตูุฑุฉ ุญุชู 20%.
    horizontal_flip=True,  # ุนูุณ ุงูุตูุฑุฉ ุฃูููุงู.
    fill_mode='nearest'  # ุทุฑููุฉ ููุก ุงููุณุงุญุงุช ุงููุงุฑุบุฉ.
)

# ุจูุงุก ูููุฐุฌ CNN
cnn_model = Sequential()  # ุฅูุดุงุก ูููุฐุฌ ุชุณูุณูู.
cnn_model.add(Conv2D(64, (3, 3), activation='relu', input_shape=(64, 64, 3)))  # ุทุจูุฉ ุงูุงูุชูุงู.
cnn_model.add(BatchNormalization())  # ุชุทุจูุน ุงูุฏูุนุฉ ูุชุญุณูู ุงูุชุฏุฑูุจ.
cnn_model.add(MaxPooling2D(pool_size=(2, 2)))  # ุทุจูุฉ ุชุฌููุน.
cnn_model.add(Dropout(0.25))  # ุทุจูุฉ ุงูุฅุณูุงุท ูุชูููู ุงูุฅูุฑุงุท ูู ุงูุชููู.
# ุญูุซ ุชูุฑุฌุน ุงููููุฉ 0 ุฅุฐุง ูุงูุช 
# ๐ฅ
# x ุฃูู ูู 0ุ ูุฃูุง ุฅุฐุง ูุงูุช 
# x ุฃูุจุฑ ุฃู ุชุณุงูู 0ุ ูุฅููุง ุชูุฑุฌุน ุงููููุฉ ููุณูุง 

cnn_model.add(Conv2D(64, (3, 3), activation='relu'))  # ุทุจูุฉ ุงูุงูุชูุงู ุงูุซุงููุฉ.
cnn_model.add(BatchNormalization())  # ุชุทุจูุน ุงูุฏูุนุฉ.
cnn_model.add(MaxPooling2D(pool_size=(2, 2)))  # ุทุจูุฉ ุชุฌููุน ุซุงููุฉ.
cnn_model.add(Dropout(0.25))  # ุทุจูุฉ ุฅุณูุงุท ุซุงููุฉ.
#ุชุญุณูู ุงููุฏุฑุฉ ุนูู ุงูุชุนููู
#ุฒูุงุฏุฉ ุชุนููุฏ ุงููููุฐุฌ

cnn_model.add(Flatten())  # ุชุญููู ุงูุจูุงูุงุช ุฅูู ุดูู ูุณุทุญ.
cnn_model.add(Dense(128, activation='relu'))  # ุทุจูุฉ ูุซููุฉ ูุน 128 ูุญุฏุฉ.
cnn_model.add(Dense(1, activation='sigmoid'))  # ุทุจูุฉ ุงูุฅุฎุฑุงุฌ (ูุซูุงุฆูุฉ ุงูุชุตููู).
#sigmoid:ุงููุทุงู: ูููุฉ ุฏุงูุฉ Sigmoid ุชุชุฑุงูุญ ุจูู 0 ู 1. ูุฐุง ูุฌุนููุง ููุงุณุจุฉ ูููุงู ุงูุชุตููู ุงูุซูุงุฆูุ ุญูุซ ูููู ุงุนุชุจุงุฑ ุงูุฎุฑุฌ ูุงุญุชูุงู.
# ุชุฌููุน ุงููููุฐุฌ
cnn_model.compile(loss='binary_crossentropy', optimizer=Adam(lr=0.001), metrics=['accuracy'])  # ุชุฌููุน ุงููููุฐุฌ ูุน ุชุญุฏูุฏ ุงูุฎุณุงุฑุฉ ูุงููููุงุณ ุงููุณุชุฎุฏู.

# ุชุฏุฑูุจ ุงููููุฐุฌ ูุน ุฒูุงุฏุฉ ุงูุจูุงูุงุช
epochs = 10  # ุนุฏุฏ epochs ููุชุฏุฑูุจ.
history = cnn_model.fit(datagen.flow(X_train, y_train, batch_size=30), epochs=epochs, verbose=1)  # ุชุฏุฑูุจ ุงููููุฐุฌ ูุน ุจูุงูุงุช ุชู ุฒูุงุฏุชูุง.
#  batch_size=30:ูุนูู ุฃูู ุณูุชู ุงุณุชุฎุฏุงู 30 ุนููุฉ ูู ูู ุฎุทูุฉ ุชุฏุฑูุจ.
# ุชููุน ุงููุฆุงุช
# verbose=1:
# ูุชู ุนุฑุถ ูุนูููุงุช ุชูุตูููุฉ ูู ูู ูุชุฑุฉ (epoch)ุ ุจูุง ูู ุฐูู:
# ุนุฏุฏ ุงููุชุฑุฉ ุงูุญุงููุฉ.
# ูููุฉ ุงูุฎุณุงุฑุฉ (loss).
# ููุงุณุงุช ุงูุฃุฏุงุก ูุซู ุงูุฏูุฉ (accuracy).
predicted_classes = (cnn_model.predict(X_test) > 0.5).astype("int32")  # ุชููุน ุงููุฆุงุช ุจูุงุกู ุนูู ุนุชุจุฉ 0.5.

# ูุตูููุฉ ุงูุงุฑุชุจุงู
cm = confusion_matrix(y_test, predicted_classes)  # ุญุณุงุจ ูุตูููุฉ ุงูุงุฑุชุจุงู.
plt.figure(figsize=(10, 7))  # ุชุญุฏูุฏ ุญุฌู ุงูุดูู.
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')  # ุฑุณู ูุตูููุฉ ุงูุงุฑุชุจุงู.
plt.title('Confusion Matrix', fontsize=20)  # ุนููุงู ูููุตูููุฉ.
plt.xlabel('Predicted Label', fontsize=15)  # ุนููุงู ุงููุญูุฑ ุงูุณููู.
plt.ylabel('True Label', fontsize=15)  # ุนููุงู ุงููุญูุฑ ุงูุตุงุฏู.
plt.show()  # ุนุฑุถ ุงููุตูููุฉ.

# ุชูุฑูุฑ ุงูุชุตููู
print(classification_report(y_test, predicted_classes))  # ุทุจุงุนุฉ ุชูุฑูุฑ ุงูุชุตููู ุงูุฐู ูุดูู ุงูุฏูุฉุ ุงูุงุณุชุฏุนุงุกุ ูุงูููุงุท ุงูุฃุฎุฑู.

# ุชุญููู ุฃุฏุงุก ุงููููุฐุฌ
plt.figure(figsize=(12, 5))  # ุชุญุฏูุฏ ุญุฌู ุงูุดูู.
plt.subplot(1, 2, 1)  # ุฅูุดุงุก ุงูุดูู ุงููุฑุนู ุงูุฃูู.
plt.plot(history.history['accuracy'], label='Train Accuracy')  # ุฑุณู ุฏูุฉ ุงูุชุฏุฑูุจ ุนูู ูุฑ ุงูุนุตูุฑ.
plt.title('Model Accuracy')  # ุนููุงู ุงูุดูู.
plt.xlabel('Epoch')  # ุนููุงู ุงููุญูุฑ ุงูุณููู.
plt.ylabel('Accuracy')  # ุนููุงู ุงููุญูุฑ ุงูุตุงุฏู.
plt.legend()  # ุฅุถุงูุฉ ูุณููุฉ ุฅูุถุงุญ.

plt.subplot(1, 2, 2)  # ุฅูุดุงุก ุงูุดูู ุงููุฑุนู ุงูุซุงูู.
plt.plot(history.history['loss'], label='Train Loss')  # ุฑุณู ุฎุณุงุฑุฉ ุงูุชุฏุฑูุจ ุนูู ูุฑ ุงูุนุตูุฑ.
plt.title('Model Loss')  # ุนููุงู ุงูุดูู.
plt.xlabel('Epoch')  # ุนููุงู ุงููุญูุฑ ุงูุณููู.
plt.ylabel('Loss')  # ุนููุงู ุงููุญูุฑ ุงูุตุงุฏู.
plt.legend()  # ุฅุถุงูุฉ ูุณููุฉ ุฅูุถุงุญ.

plt.tight_layout()  # ุถุจุท ุงูุชุฎุทูุท.
plt.show()  # ุนุฑุถ ุงูุฑุณูู ุงูุจูุงููุฉ.

# ุนุฑุถ ุจุนุถ ูุชุงุฆุฌ ุงูุชููุนุงุช
L = 5  # ุนุฏุฏ ุงูุตููู ูู ุงูุดุจูุฉ.
W = 5  # ุนุฏุฏ ุงูุฃุนูุฏุฉ ูู ุงูุดุจูุฉ.
fig, axes = plt.subplots(L, W, figsize=(12, 12))  # ุฅูุดุงุก ุดุจูุฉ ูุฑุนูุฉ ููุนุฑุถ.
axes = axes.ravel()  # ุชุญููู ุงููุตูููุฉ ุฅูู ุดูู ูุณุทุญ.

for i in range(L * W):  # ุชูุฑุงุฑ ูุชูููุฏ ุตูุฑ ุชููุนุงุช.
    axes[i].imshow(X_test[i])  # ุนุฑุถ ุงูุตูุฑุฉ.
    axes[i].set_title(f'Pred: {predicted_classes[i][0]}, True: {y_test[i]}', fontsize=12)  # ุฅุถุงูุฉ ุนููุงู ูุนุฑุถ ุงูุชููุน ูุงููุงูุน.
    axes[i].axis('off')  # ุฅุฒุงูุฉ ุงููุญุงูุฑ.

plt.subplots_adjust(wspace=0.5)  # ุชุนุฏูู ุงููุณุงูุงุช ุจูู ุงูุตูุฑ.
plt.suptitle('Sample Predictions', fontsize=20)  # ุนููุงู ุนุงู.
plt.show()  # ุนุฑุถ ุงูุตูุฑ.

# ุนุฑุถ ุงูุตูุฑ ุงูุชู ุชู ุชุตููููุง ุจุดูู ุฎุงุทุฆ
incorrect_indices = np.where(predicted_classes.flatten() != y_test)[0]  # ุงูุญุตูู ุนูู ููุงุฑุณ ุงูุตูุฑ ุงููุตููุฉ ุจุดูู ุฎุงุทุฆ.
fig, axes = plt.subplots(2, 5, figsize=(15, 6))  # ุฅูุดุงุก ุดุจูุฉ ูุฑุนูุฉ ูุนุฑุถ ุงูุฃุฎุทุงุก.
for ax, index in zip(axes.flatten(), incorrect_indices[:10]):  # ุนุฑุถ ุฃูู 10 ุฃุฎุทุงุก.
    ax.imshow(X_test[index])  # ุนุฑุถ ุงูุตูุฑุฉ.
    ax.set_title(f'Pred: {predicted_classes[index][0]}, True: {y_test[index]}', fontsize=12)  # ุฅุถุงูุฉ ุนููุงู ููุชููุน ูุงููุงูุน.
    ax.axis('off')  # ุฅุฒุงูุฉ ุงููุญุงูุฑ.
plt.suptitle('Incorrect Predictions', fontsize=20)  # ุนููุงู ุนุงู.
plt.show()  # ุนุฑุถ ุงูุตูุฑ.

# ุญูุธ ุงููููุฐุฌ
#cnn_model.save('C:/Users/pc/Desktop/face_recognition/my_save_model.h5')  # ุญูุธ ุงููููุฐุฌ ูู ููู HDF5 (ุชู ุงูุชุนููู ุนููู).